<form id="user-register" method="post">
  <label for="Email">Email *</label>
  <input
    type="email"
    name="email"
    id="Email"
    placeholder="example@info.co.jp"
    autocapitalize="off"
    required
    autocomplete="on"
  >

  <label for="phone">Phone *</label>
  <input type="text" name="phone" id="phone" placeholder="0123456789" required autocomplete="on">

  <label for="CreatePassword">Password *</label>
  <input type="password" name="password" id="password" required autocomplete="current-password" minlength="8">

  <label for="CreatePassword">Password Confirm *</label>
  <input
    type="password"
    name="password_confirmation"
    id="password_confirmation"
    required
    autocomplete="current-password"
  >

  <label for="LastName">Last Name *</label>
  <input type="text" name="last_name" id="lastName" placeholder="山田" required autocomplete="on">

  <label for="FirstName">First Name *</label>
  <input type="text" name="first_name" id="firstName" placeholder="太郎" autofocus required autocomplete="on">

  <label for="birthday" class="label">Date of Birth *</label>
  <input type="date" name="date_of_birth" id="birthday" required autocomplete="on">

  <div class="field-radio">
    <label for="gender" class="label">Gender *</label>
    <label><input type="radio" value="男性" name="gender" id="gender_male" required>男性</label>
    <label><input type="radio" value="女性" name="gender" id="gender_female" required>女性</label>
    <label><input type="radio" value="未回答" name="gender" id="gender_null" required>未回答</label>
  </div>

  <div class="field-radio">
    <p>DM Settings</p>
    <label><input type="checkbox" value="true" name="accept_email_marketing" checked id="dm_setting_on">受け取る</label>
  </div>

  <button type="submit">登録</button>
</form>

<p id="result"></p>

<script>
  window.addEventListener('DOMContentLoaded', (event) => {
    const form = document.getElementById('user-register');
    console.log(form);
    const CustomerApp = window.CustomerApp;
    console.log(CustomerApp);
    if (!CustomerApp) return;

    const CustomerRegisterSchema = CustomerApp.CustomerRegisterFormSchema;
    const safeParseSchema = CustomerApp.safeParseSchema;
    console.log(CustomerRegisterSchema.entries, 'CustomerRegisterSchema.entries');

    const createErrorElm = (inputName) => {
      const errorElm = document.createElement('p');
      errorElm.setAttribute('aria-invalid', 'true');
      errorElm.setAttribute('role', 'alert');
      errorElm.setAttribute('id', `${inputName}-error`);
      errorElm.style.color = 'red';
      return errorElm;
    };

    const inputs = form.querySelectorAll('input');
    for (const input of inputs) {
      input.addEventListener('blur', (e) => {
        const target = e.target;
        const name = target.name;
        const value = target.value;
        const entrySchema = CustomerRegisterSchema.entries[name];
        if (!entrySchema) return;

        const parseResult = safeParseSchema(entrySchema, value);
        let errorElm = document.getElementById(`${name}-error`);
        if (!parseResult.success) {
          console.error(parseResult.issues);

          if (!errorElm) {
            errorElm = createErrorElm(name);
          }
          errorElm.innerHTML = parseResult.issues.map((i) => i.message).join('<br>');
          target.parentNode.insertBefore(errorElm, target.nextSibling);
        } else {
          errorElm?.remove();
        }
      });
    }

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const data = new FormData(form);
      const dataValues = Object.fromEntries(data.entries());
      console.log(dataValues, 'dataValues');
      const validateResult = CustomerApp.safeParseSchema(CustomerRegisterSchema, dataValues);
      if (!validateResult.success) {
        console.error(validateResult.issues);
        for (const issue of validateResult.issues) {
          const { path, message } = issue;
          const name = path[0].key;
          let errorElm = document.getElementById(`${name}-error`);
          if (!errorElm) {
            errorElm = createErrorElm(name);
          }
          errorElm.innerHTML = message;
          const input = form.querySelector(`[name=${name}]`);
          input?.parentNode.insertBefore(errorElm, input.nextSibling);
        }

        return;
      }
      fetch(window.CustomerApp.registerApiUrl, {
        method: 'POST',
        body: data,
      })
        .then((response) => response.json())
        .then((data) => {
          console.log(data);
          document.getElementById('result').innerHTML = JSON.stringify(data);
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    });
  });
</script>

<style>
  form {
    width: 100%;
    max-width: 400px;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: #333;
  }

  input:is([type='text'], [type='email'], [type='password'], [type='date']) {
    width: 100%;
    padding: 10px;
    margin-bottom: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
  }

  .field-radio {
    display: flex;
    align-items: center;
    margin-bottom: 16px;
    column-gap: 10px;
  }

  .field-radio label {
    display: flex;
    margin-bottom: 0px;
    align-items: center;
    font-weight: normal;
    color: #555;
  }

  button {
    padding: 12px;
    background-color: #007bff !important;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  button:hover {
    background-color: #0056b3;
  }
</style>

{% schema %}
{
  "name": "会員登録フォーム",
  "target": "section",
  "settings": []
}
{% endschema %}
